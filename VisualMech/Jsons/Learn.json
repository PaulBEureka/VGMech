[{"CardID":"0","ImageSource":"Images/movement_bg.png","ThumbSource":"Images/movement_icon.png","Title":"MOVEMENT MECHANIC","Description":"Get to know movement integration, variations, and more!","UnityLink":"https://almers5.github.io/Game-Mechanics/MovementMechanic","CodeText":"public class Player : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;[SerializeField] float moveSpeed = 10f;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Update()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Move();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void Move()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;// Time.deltaTime makes it the same movement for every computers FPS\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;var deltaX = Input.GetAxis(\u0026quot;Horizontal\u0026quot;) * Time.deltaTime * moveSpeed;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;var newXPosition = Mathf.Clamp(transform.position.x + deltaX, xMin, xMax);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;var deltaY = Input.GetAxis(\u0026quot;Vertical\u0026quot;) * Time.deltaTime * moveSpeed;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;var newYPosition = Mathf.Clamp(transform.position.y + deltaY, yMin, yMax);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;transform.position = new Vector2(newXPosition, newYPosition);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}","CommonGenres":"Adventure, Platformers, First Person Shooters, Racing, Open World, Role Playing Games","PossibleVariations":"Top-Down Movement, Side-on Movement, 3D Movement, Click to Move, Turn-based Movement","PossibleCombinations":"This game mechanic is frequently utilized across various genres, a wide range of mechanics like shooting, gathering, and others are commonly integrated with the movement mechanism.","InteractiveControls":"W - Move Forward \u0026lt;br/\u0026gt;A - Move Left\u0026lt;br/\u0026gt;S - Move Backward\u0026lt;br/\u0026gt;D - Move Right"},{"CardID":"1","ImageSource":"Images/ShootingMechanic_Thumbnail.png","ThumbSource":"Images/shooting_thumb.png","Title":"SHOOTING MECHANIC","Description":"Learn how to add shooting elements!","UnityLink":"https://almers5.github.io/Game-Mechanics/ShootingMechanic/","CodeText":"public class Player : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;[SerializeField] Rigidbody2D rb;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;[SerializeField] Weapon weapon;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Vector2 mousePosition;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Update()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (Input.GetButtonDown(\u0026quot;Fire1\u0026quot;))\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;weapon.Fire();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void FixedUpdate()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Vector2 aimDirection = mousePosition - rb.position;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;float aimAngle = Mathf.Atan2(aimDirection.y, aimDirection.x) * Mathf.Rad2Deg - 90f;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;rb.rotation = aimAngle;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;public class Player : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;[SerializeField] Rigidbody2D rb;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;[SerializeField] Weapon weapon;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Vector2 mousePosition;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Update()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (Input.GetButtonDown(\u0026quot;Fire1\u0026quot;))\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;weapon.Fire();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void FixedUpdate()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Vector2 aimDirection = mousePosition - rb.position;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;float aimAngle = Mathf.Atan2(aimDirection.y, aimDirection.x) * Mathf.Rad2Deg - 90f;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;rb.rotation = aimAngle;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;public class Bullet : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void OnCollisionEnter2D(Collision2D collision)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Destroy(collision.gameObject);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Destroy(gameObject);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}","CommonGenres":"First Person Shooters, Third Person Shooters, Action Adventure, Battle Royale, Sci-Fi, Survival Horror","PossibleVariations":"Click to Shoot, Precision Shooting, Aim Down Sights, Projectile Types, Cover Based Shooting","PossibleCombinations":"This game mechanic is mostly implemented on action base games which movement mechanics is needed with resource management.","InteractiveControls":"Mouse Pointer - Aim\u0026lt;br/\u0026gt;Left Click Mouse Button - Shoot"},{"CardID":"2","ImageSource":"Images/CollectingMechanic_Thumbnail.png","ThumbSource":"Images/collecting_thumb.png","Title":"COLLECTING MECHANIC","Description":"Want your game to have collecting mechanics? Go here!","UnityLink":"https://almers5.github.io/Game-Mechanics/CollectingMechanic/","CodeText":"public class Collect : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;[SerializeField] int value;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void OnTriggerEnter2D(Collider2D collision)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (collision.gameObject.CompareTag(\u0026quot;Player\u0026quot;))\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Destroy(gameObject);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;StarCounter.instance.IncreaseStars(value);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;public class StarCounter : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public static StarCounter instance;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public TMP_Text starText;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public int currentStars = 0;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void Awake()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;instance = this;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Start()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;starText.text = \u0026quot;STARS: \u0026quot; + currentStars.ToString();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public void IncreaseStars(int starCount)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;currentStars += starCount;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;starText.text = \u0026quot;STARS: \u0026quot; + currentStars.ToString();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}","CommonGenres":"Horror, Battle Royale, Sandbox","PossibleVariations":"Key indicator to collect","PossibleCombinations":"The potential combination of game mechanics integrated into this collection system would begin with a movement mechanic, followed by a building mechanic where the collected items serve a purpose, along with other action-based mechanics like melee and ranged attack systems.","InteractiveControls":"W - Move Forward \u0026lt;br/\u0026gt;A - Move Left\u0026lt;br/\u0026gt;S - Move Backward\u0026lt;br/\u0026gt;D - Move Right"},{"CardID":"3","ImageSource":"Images/InteractMechanic_Thumbnail.png","ThumbSource":"Images/InteractMechanic_Icon.png","Title":"INTERACT MECHANIC","Description":"Want your game to have an interacting mechanics? Go here!","UnityLink":"https://almers5.github.io/Game-Mechanics/InteractMechanic/","CodeText":"public class NPC : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public GameObject dialoguePanel;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public Text dialogueText;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public string[] dialogue;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private int index;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public GameObject contButton;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public float wordSpeed;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public bool playerIsClose;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Update()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (Input.GetKeyDown(KeyCode.E) \u0026amp;\u0026amp; playerIsClose)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (dialoguePanel.activeInHierarchy)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;zeroText();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;else\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;dialoguePanel.SetActive(true);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;StartCoroutine(Typing());\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (dialogueText.text == dialogue[index])\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;contButton.SetActive(true);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public void zeroText()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;dialogueText.text = \u0026quot;\u0026quot;;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;index = 0;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;dialoguePanel.SetActive(false);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;IEnumerator Typing()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;foreach(char letter in dialogue[index].ToCharArray())\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;dialogueText.text += letter;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;yield return new WaitForSeconds(wordSpeed);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public void NextLine()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;contButton.SetActive(false);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (index \u0026lt; dialogue.Length - 1)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;index++;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;dialogueText.text = \u0026quot;\u0026quot;;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;StartCoroutine(Typing());\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;else\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;zeroText();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void OnTriggerEnter2D(Collider2D collision)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (collision.CompareTag(\u0026quot;Player\u0026quot;))\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;playerIsClose = true;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;private void OnTriggerExit2D(Collider2D collision)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (collision.CompareTag(\u0026quot;Player\u0026quot;))\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;playerIsClose = false;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;zeroText();\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}","CommonGenres":"Visual Novel, Role Playing Games","PossibleVariations":"Text on Screen, Dialogue cloud on top of a character, Cinematic text view mode","PossibleCombinations":"Variations of game mechanics that can be implmented to interact mechanic would be a turn-based system mechanic or a choose four options type of mechanic that would further enhance its gameplay features.","InteractiveControls":"Left Arrow Key or A - Move to Left\u0026lt;br/\u0026gt;Right Arrow Key or D - Move to Right\u0026lt;br/\u0026gt;Space Bar - Jump\u0026lt;br/\u0026gt;\u0026quot;E\u0026quot; - Press to interact"},{"CardID":"4","ImageSource":"Images/HealthSystem_Thumbnail.png","ThumbSource":"Images/HealthSystem_Icon.png","Title":"HEALTH SYSTEM","Description":"Want your game to have health system mechanics? Go here!","UnityLink":"https://almers5.github.io/Game-Mechanics/HealthSystem/","CodeText":"public class playerHealth : MonoBehaviour\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;{\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;public float health;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;public float maxHealth;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;public Image healthBar;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;void Start()\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;{\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;maxHealth = health;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;}\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;void Update()\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;{\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;healthBar.fillAmount = Mathf.Clamp(health / maxHealth, 0, 1);\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;if (health \u0026amp;amp;amp;lt;- 0)\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;{\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;Destroy(gameObject);\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;}\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;\u0026amp;amp;amp;#160;}\u0026amp;amp;amp;lt;br /\u0026amp;amp;amp;gt;}","CommonGenres":"First Person Shooter, Massive Online Battle Arena, Figting Games","PossibleVariations":"Health bar on top of the character, Text-based health, Health bar (symbols or icons), Red screen of danger","PossibleCombinations":"The health system mechanic is a popular game mechanic that is combined in any type of action based game mechanics such as shooting mechanic, movement mechanic, combat system mechanic, etc.","InteractiveControls":"Left Arrow Key or A - Move to Left\u0026amp;amp;amp;lt;br/\u0026amp;amp;amp;gt;Right Arrow Key or D - Move to Right\u0026amp;amp;amp;lt;br/\u0026amp;amp;amp;gt;Space Bar - Jump"}]