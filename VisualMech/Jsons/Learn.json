[{"CardID":"0","ImageSource":"Images/movement_bg.png","ThumbSource":"Images/movement_icon.png","Title":"MOVEMENT MECHANIC","Description":"Get to know movement integration, variations, and more!","UnityLink":"https://almers5.github.io/Game-Mechanics/MovementMechanic","CodeText":"public class Player : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e    [SerializeField] float moveSpeed = 10f;\u003cbr /\u003e\u003cbr /\u003e    void Update()\u003cbr /\u003e    {\u003cbr /\u003e        Move();\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    private void Move()\u003cbr /\u003e    {\u003cbr /\u003e        // Time.deltaTime makes it the same movement for every computers FPS\u003cbr /\u003e        var deltaX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * moveSpeed;\u003cbr /\u003e        var newXPosition = Mathf.Clamp(transform.position.x + deltaX, xMin, xMax);\u003cbr /\u003e\u003cbr /\u003e        var deltaY = Input.GetAxis(\"Vertical\") * Time.deltaTime * moveSpeed;\u003cbr /\u003e        var newYPosition = Mathf.Clamp(transform.position.y + deltaY, yMin, yMax);\u003cbr /\u003e\u003cbr /\u003e        transform.position = new Vector2(newXPosition, newYPosition);\u003cbr /\u003e    }\u003cbr /\u003e}","CommonGenres":"Adventure, Platformers, First Person Shooters, Racing, Open World, Role Playing Games","PossibleVariations":"Top-Down Movement, Side-on Movement, 3D Movement, Click to Move, Turn-based Movement","PossibleCombinations":"This game mechanic is frequently utilized across various genres, a wide range of mechanics like shooting, gathering, and others are commonly integrated with the movement mechanism.","InteractiveControls":"W - Move Forward \u003cbr/\u003eA - Move Left\u003cbr/\u003eS - Move Backward\u003cbr/\u003eD - Move Right"},{"CardID":"1","ImageSource":"Images/ShootingMechanic_Thumbnail.png","ThumbSource":"Images/shooting_thumb.png","Title":"SHOOTING MECHANIC","Description":"Learn how to add shooting elements!","UnityLink":"https://almers5.github.io/Game-Mechanics/ShootingMechanic/","CodeText":"public class Player : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e\u003cbr /\u003e    [SerializeField] Rigidbody2D rb;\u003cbr /\u003e    [SerializeField] Weapon weapon;\u003cbr /\u003e\u003cbr /\u003e    Vector2 mousePosition;\u003cbr /\u003e\u003cbr /\u003e    void Update()\u003cbr /\u003e    {\u003cbr /\u003e        if (Input.GetButtonDown(\"Fire1\"))\u003cbr /\u003e        {\u003cbr /\u003e            weapon.Fire();\u003cbr /\u003e        }\u003cbr /\u003e\u003cbr /\u003e        mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);\u003cbr /\u003e\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    private void FixedUpdate()\u003cbr /\u003e    {\u003cbr /\u003e        Vector2 aimDirection = mousePosition - rb.position;\u003cbr /\u003e        float aimAngle = Mathf.Atan2(aimDirection.y, aimDirection.x) * Mathf.Rad2Deg - 90f;\u003cbr /\u003e        rb.rotation = aimAngle;\u003cbr /\u003e    }\u003cbr /\u003e}\u003cbr /\u003e\u003cbr /\u003epublic class Player : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e\u003cbr /\u003e    [SerializeField] Rigidbody2D rb;\u003cbr /\u003e    [SerializeField] Weapon weapon;\u003cbr /\u003e\u003cbr /\u003e    Vector2 mousePosition;\u003cbr /\u003e\u003cbr /\u003e    void Update()\u003cbr /\u003e    {\u003cbr /\u003e        if (Input.GetButtonDown(\"Fire1\"))\u003cbr /\u003e        {\u003cbr /\u003e            weapon.Fire();\u003cbr /\u003e        }\u003cbr /\u003e\u003cbr /\u003e        mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    private void FixedUpdate()\u003cbr /\u003e    {\u003cbr /\u003e        Vector2 aimDirection = mousePosition - rb.position;\u003cbr /\u003e        float aimAngle = Mathf.Atan2(aimDirection.y, aimDirection.x) * Mathf.Rad2Deg - 90f;\u003cbr /\u003e        rb.rotation = aimAngle;\u003cbr /\u003e    }\u003cbr /\u003e}\u003cbr /\u003e\u003cbr /\u003epublic class Bullet : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e    private void OnCollisionEnter2D(Collision2D collision)\u003cbr /\u003e    {\u003cbr /\u003e        Destroy(collision.gameObject);\u003cbr /\u003e        Destroy(gameObject);\u003cbr /\u003e    }\u003cbr /\u003e}","CommonGenres":"First Person Shooters, Third Person Shooters, Action Adventure, Battle Royale, Sci-Fi, Survival Horror","PossibleVariations":"Click to Shoot, Precision Shooting, Aim Down Sights, Projectile Types, Cover Based Shooting","PossibleCombinations":"This game mechanic is mostly implemented on action base games which movement mechanics is needed with resource management.","InteractiveControls":"Mouse Pointer - Aim\u003cbr/\u003eLeft Click Mouse Button - Shoot"},{"CardID":"2","ImageSource":"Images/CollectingMechanic_Thumbnail.png","ThumbSource":"Images/collecting_thumb.png","Title":"COLLECTING MECHANIC","Description":"Want your game to have collecting mechanics? Go here!","UnityLink":"https://almers5.github.io/Game-Mechanics/CollectingMechanic/","CodeText":"public class Collect : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e    [SerializeField] int value;\u003cbr /\u003e\u003cbr /\u003e    private void OnTriggerEnter2D(Collider2D collision)\u003cbr /\u003e    {\u003cbr /\u003e        if (collision.gameObject.CompareTag(\"Player\"))\u003cbr /\u003e        {\u003cbr /\u003e            Destroy(gameObject);\u003cbr /\u003e            StarCounter.instance.IncreaseStars(value);\u003cbr /\u003e        }\u003cbr /\u003e    }\u003cbr /\u003e}\u003cbr /\u003e\u003cbr /\u003epublic class StarCounter : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e    public static StarCounter instance;\u003cbr /\u003e    public TMP_Text starText;\u003cbr /\u003e    public int currentStars = 0;\u003cbr /\u003e\u003cbr /\u003e    private void Awake()\u003cbr /\u003e    {\u003cbr /\u003e        instance = this;\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    void Start()\u003cbr /\u003e    {\u003cbr /\u003e        starText.text = \"STARS: \" + currentStars.ToString();\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    public void IncreaseStars(int starCount)\u003cbr /\u003e    {\u003cbr /\u003e        currentStars += starCount;\u003cbr /\u003e        starText.text = \"STARS: \" + currentStars.ToString();\u003cbr /\u003e    }\u003cbr /\u003e}","CommonGenres":"Horror, Battle Royale, Sandbox","PossibleVariations":"Key indicator to collect","PossibleCombinations":"The potential combination of game mechanics integrated into this collection system would begin with a movement mechanic, followed by a building mechanic where the collected items serve a purpose, along with other action-based mechanics like melee and ranged attack systems.","InteractiveControls":"W - Move Forward \u003cbr/\u003eA - Move Left\u003cbr/\u003eS - Move Backward\u003cbr/\u003eD - Move Right"},{"CardID":"3","ImageSource":"Images/InteractMechanic_Thumbnail.png","ThumbSource":"Images/InteractMechanic_Icon.png","Title":"INTERACT MECHANIC","Description":"Want your game to have an interacting mechanics? Go here!","UnityLink":"https://almers5.github.io/Game-Mechanics/InteractMechanic/","CodeText":"public class NPC : MonoBehaviour\u003cbr /\u003e{\u003cbr /\u003e    public GameObject dialoguePanel;\u003cbr /\u003e    public Text dialogueText;\u003cbr /\u003e    public string[] dialogue;\u003cbr /\u003e    private int index;\u003cbr /\u003e\u003cbr /\u003e    public GameObject contButton;\u003cbr /\u003e    public float wordSpeed;\u003cbr /\u003e    public bool playerIsClose;\u003cbr /\u003e\u003cbr /\u003e    void Update()\u003cbr /\u003e    {\u003cbr /\u003e        if (Input.GetKeyDown(KeyCode.E) \u0026\u0026 playerIsClose)\u003cbr /\u003e        {\u003cbr /\u003e            if (dialoguePanel.activeInHierarchy)\u003cbr /\u003e            {\u003cbr /\u003e                zeroText();\u003cbr /\u003e            }\u003cbr /\u003e            else\u003cbr /\u003e            {\u003cbr /\u003e                dialoguePanel.SetActive(true);\u003cbr /\u003e                StartCoroutine(Typing());\u003cbr /\u003e            }\u003cbr /\u003e        }\u003cbr /\u003e        if (dialogueText.text == dialogue[index])\u003cbr /\u003e        {\u003cbr /\u003e            contButton.SetActive(true);\u003cbr /\u003e        }\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    public void zeroText()\u003cbr /\u003e    {\u003cbr /\u003e        dialogueText.text = \"\";\u003cbr /\u003e        index = 0;\u003cbr /\u003e        dialoguePanel.SetActive(false);\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    IEnumerator Typing()\u003cbr /\u003e    {\u003cbr /\u003e        foreach(char letter in dialogue[index].ToCharArray())\u003cbr /\u003e        {\u003cbr /\u003e            dialogueText.text += letter;\u003cbr /\u003e            yield return new WaitForSeconds(wordSpeed);\u003cbr /\u003e        }\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    public void NextLine()\u003cbr /\u003e    {\u003cbr /\u003e        contButton.SetActive(false);\u003cbr /\u003e\u003cbr /\u003e        if (index \u003c dialogue.Length - 1)\u003cbr /\u003e        {\u003cbr /\u003e            index++;\u003cbr /\u003e            dialogueText.text = \"\";\u003cbr /\u003e            StartCoroutine(Typing());\u003cbr /\u003e        }\u003cbr /\u003e        else\u003cbr /\u003e        {\u003cbr /\u003e            zeroText();\u003cbr /\u003e        }\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    private void OnTriggerEnter2D(Collider2D collision)\u003cbr /\u003e    {\u003cbr /\u003e        if (collision.CompareTag(\"Player\"))\u003cbr /\u003e        {\u003cbr /\u003e            playerIsClose = true;\u003cbr /\u003e        }\u003cbr /\u003e    }\u003cbr /\u003e\u003cbr /\u003e    private void OnTriggerExit2D(Collider2D collision)\u003cbr /\u003e    {\u003cbr /\u003e        if (collision.CompareTag(\"Player\"))\u003cbr /\u003e        {\u003cbr /\u003e            playerIsClose = false;\u003cbr /\u003e            zeroText();\u003cbr /\u003e        }\u003cbr /\u003e    }\u003cbr /\u003e}","CommonGenres":"Visual Novel, Role Playing Games","PossibleVariations":"Text on Screen, Dialogue cloud on top of a character, Cinematic text view mode","PossibleCombinations":"Variations of game mechanics that can be implmented to interact mechanic would be a turn-based system mechanic or a choose four options type of mechanic that would further enhance its gameplay features.","InteractiveControls":"Left Arrow Key or A - Move to Left\u003cbr/\u003eRight Arrow Key or D - Move to Right\u003cbr/\u003eSpace Bar - Jump\u003cbr/\u003e\"E\" - Press to interact"},{"CardID":"4","ImageSource":"Images/HealthSystem_Thumbnail.png","ThumbSource":"Images/HealthSystem_Icon.png","Title":"HEALTH SYSTEM","Description":"Want your game to have health system mechanics? Go here!","UnityLink":"https://almers5.github.io/Game-Mechanics/HealthSystem/","CodeText":"public class playerHealth : MonoBehaviour\u0026lt;br /\u0026gt;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public float health;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public float maxHealth;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;public Image healthBar;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Start()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;maxHealth = health;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;void Update()\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;healthBar.fillAmount = Mathf.Clamp(health / maxHealth, 0, 1);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;if (health \u0026lt;- 0)\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;{\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;Destroy(gameObject);\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;\u0026#160;\u0026#160;\u0026#160;\u0026#160;}\u0026lt;br /\u0026gt;}","CommonGenres":"First Person Shooter, Massive Online Battle Arena, Figting Games","PossibleVariations":"Health bar on top of the character, Text-based health, Health bar (symbols or icons), Red screen of danger","PossibleCombinations":"The health system mechanic is a popular game mechanic that is combined in any type of action based game mechanics such as shooting mechanic, movement mechanic, combat system mechanic, etc.","InteractiveControls":"Left Arrow Key or A - Move to Left\u0026lt;br/\u0026gt;Right Arrow Key or D - Move to Right\u0026lt;br/\u0026gt;Space Bar - Jump"}]